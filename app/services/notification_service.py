from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select, and_
from app.models import User, Subscription, SubscriptionStatus
from app.services.subscription_service import SubscriptionService, get_current_utc_time
from app.services.database import db_service
from app.utils.helpers import format_datetime_for_user
from app.utils.keyboards import get_subscription_keyboard
from datetime import timedelta
from config.settings import settings
from typing import List
import logging

logger = logging.getLogger(__name__)

class NotificationService:
    @staticmethod
    async def get_users_with_expiring_subscriptions(
        session: AsyncSession, 
        days_before: int = None
    ) -> List[tuple[User, Subscription]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫–∞—é—â–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
        if days_before is None:
            days_before = settings.subscription_expiry_notification_days
        
        current_time = get_current_utc_time()
        notification_threshold = current_time + timedelta(days=days_before)
        
        # –ò—â–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–∞—é—Ç –≤ –±–ª–∏–∂–∞–π—à–∏–µ N –¥–Ω–µ–π
        result = await session.execute(
            select(User, Subscription)
            .join(Subscription, User.id == Subscription.user_id)
            .where(
                and_(
                    Subscription.status.in_([SubscriptionStatus.ACTIVE, SubscriptionStatus.TRIAL]),
                    Subscription.end_date <= notification_threshold,
                    Subscription.end_date > current_time,
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å –¥–∞–≤–Ω–æ
                    User.last_expiry_notification_sent.is_(None) |
                    (User.last_expiry_notification_sent < current_time - timedelta(hours=12))
                )
            )
        )
        
        return result.all()
    
    @staticmethod
    async def get_users_with_expired_subscriptions(session: AsyncSession) -> List[tuple[User, Subscription]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –∏—Å—Ç–µ–∫—à–∏–º–∏ –ø–æ–¥–ø–∏—Å–∫–∞–º–∏"""
        current_time = get_current_utc_time()
        
        # –ò—â–µ–º –ø–æ–¥–ø–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –∏—Å—Ç–µ–∫–ª–∏ –≤ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
        expired_threshold = current_time - timedelta(hours=24)
        
        result = await session.execute(
            select(User, Subscription)
            .join(Subscription, User.id == Subscription.user_id)
            .where(
                and_(
                    Subscription.status.in_([SubscriptionStatus.ACTIVE, SubscriptionStatus.TRIAL]),
                    Subscription.end_date <= current_time,
                    Subscription.end_date >= expired_threshold,
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –µ—â–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–æ—Å—å
                    User.last_expired_notification_sent.is_(None) |
                    (User.last_expired_notification_sent < Subscription.end_date)
                )
            )
        )
        
        return result.all()
    
    @staticmethod
    async def send_expiry_warning_notification(
        user: User, 
        subscription: Subscription,
        bot,
        session: AsyncSession
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            days_left = (subscription.end_date - get_current_utc_time()).days
            hours_left = (subscription.end_date - get_current_utc_time()).total_seconds() / 3600
            
            if days_left <= 0 and hours_left > 0:
                time_text = f"–º–µ–Ω–µ–µ —á–µ–º —á–µ—Ä–µ–∑ {int(hours_left)} —á–∞—Å–æ–≤"
            elif days_left == 1:
                time_text = "–∑–∞–≤—Ç—Ä–∞"
            else:
                time_text = f"—á–µ—Ä–µ–∑ {days_left} –¥–Ω–µ–π"
            
            status_text = "–ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥" if subscription.status == SubscriptionStatus.TRIAL else "–ø–æ–¥–ø–∏—Å–∫–∞"
            
            warning_text = (
                f"‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!**\\n\\n"
                f"–í–∞—à {status_text} –∏—Å—Ç–µ–∫–∞–µ—Ç {time_text}\\n"
                f"üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {format_datetime_for_user(subscription.end_date)}\\n\\n"
                f"üí° –ß—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –≤—Å–µ–º–∏ —Ñ—É–Ω–∫—Ü–∏—è–º–∏ –±–æ—Ç–∞:\\n"
                f"‚Ä¢ –û—Ñ–æ—Ä–º–∏—Ç–µ –Ω–æ–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É\\n"
                f"‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω\\n"
                f"‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É –ø—Ä–∏ –ø–æ–∫—É–ø–∫–µ –¥–ª–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤\\n\\n"
                f"üíé –ù–µ —É–ø—É—Å—Ç–∏—Ç–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –≤–∞—à–µ–π –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –¥–µ–≤—É—à–∫–æ–π!"
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            subscription_info = await SubscriptionService.get_subscription_info(session, user.id)
            keyboard = get_subscription_keyboard(subscription_info)
            
            await bot.send_message(
                chat_id=user.telegram_id,
                text=warning_text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            user.last_expiry_notification_sent = get_current_utc_time()
            await session.commit()
            
            logger.info(f"Expiry warning sent to user {user.telegram_id}")
            return True
            
        except Exception as e:
            logger.error(f"Error sending expiry warning to user {user.telegram_id}: {e}")
            return False
    
    @staticmethod
    async def send_expired_notification(
        user: User, 
        subscription: Subscription,
        bot,
        session: AsyncSession
    ) -> bool:
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
        try:
            status_text = "–ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥" if subscription.status == SubscriptionStatus.TRIAL else "–ø–æ–¥–ø–∏—Å–∫–∞"
            
            expired_text = (
                f"‚ùå **{status_text.capitalize()} –∏—Å—Ç–µ–∫**\\n\\n"
                f"üìÖ –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è: {format_datetime_for_user(subscription.end_date)}\\n\\n"
                f"üîí –î–æ—Å—Ç—É–ø –∫ —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω:\\n"
                f"‚Ä¢ –û–±—â–µ–Ω–∏–µ —Å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –¥–µ–≤—É—à–∫–æ–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ\\n"
                f"‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ\\n"
                f"‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\\n\\n"
                f"üíé **–í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –¥–æ—Å—Ç—É–ø:**\\n"
                f"‚Ä¢ –í—ã–±–µ—Ä–∏—Ç–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏\\n"
                f"‚Ä¢ –ü–æ–ª—É—á–∏—Ç–µ —Å–∫–∏–¥–∫—É –¥–æ 33% –Ω–∞ –¥–ª–∏—Ç–µ–ª—å–Ω—ã–µ –ø–ª–∞–Ω—ã\\n"
                f"‚Ä¢ –ú–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –∞–∫—Ç–∏–≤–∞—Ü–∏—è –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã\\n\\n"
                f"üéÅ –í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ –∏ –∏—Å—Ç–æ—Ä–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!"
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –¥–ª—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
            subscription_info = await SubscriptionService.get_subscription_info(session, user.id)
            keyboard = get_subscription_keyboard(subscription_info)
            
            await bot.send_message(
                chat_id=user.telegram_id,
                text=expired_text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∏—Å—Ç–µ–∫—à—É—é
            subscription.status = SubscriptionStatus.EXPIRED
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            user.last_expired_notification_sent = get_current_utc_time()
            await session.commit()
            
            logger.info(f"Expired notification sent to user {user.telegram_id}")
            return True
            
        except Exception as e:
            logger.error(f"Error sending expired notification to user {user.telegram_id}: {e}")
            return False
    
    @staticmethod
    async def check_and_send_notifications(bot) -> dict:
        """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
        if not settings.enable_subscription_notifications:
            logger.info("Subscription notifications are disabled")
            return {"expiry_warnings": 0, "expired_notifications": 0, "errors": 0}
        
        stats = {
            "expiry_warnings": 0,
            "expired_notifications": 0,
            "errors": 0
        }
        
        try:
            async with db_service.async_session() as session:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫–∞—é—â–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
                expiring_users = await NotificationService.get_users_with_expiring_subscriptions(session)
                
                for user, subscription in expiring_users:
                    success = await NotificationService.send_expiry_warning_notification(
                        user, subscription, bot, session
                    )
                    if success:
                        stats["expiry_warnings"] += 1
                    else:
                        stats["errors"] += 1
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ–∫—à–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
                expired_users = await NotificationService.get_users_with_expired_subscriptions(session)
                
                for user, subscription in expired_users:
                    success = await NotificationService.send_expired_notification(
                        user, subscription, bot, session
                    )
                    if success:
                        stats["expired_notifications"] += 1
                    else:
                        stats["errors"] += 1
                
                logger.info(f"Notification check completed: {stats}")
                return stats
                
        except Exception as e:
            logger.error(f"Error in notification check: {e}")
            stats["errors"] += 1
            return stats