import google.generativeai as genai
from config.settings import settings
from app.models import GirlfriendProfile
from typing import Optional
import logging

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini API
genai.configure(api_key=settings.gemini_api_key)


class GeminiService:
    # –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ Gemini
    AVAILABLE_MODELS = {
        "gemini-pro": {
            "name": "Gemini Pro",
            "description": "–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å —Å —Ö–æ—Ä–æ—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º",
            "recommended_for": "general"
        },
        "gemini-1.5-pro": {
            "name": "Gemini 1.5 Pro",
            "description": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–¥–µ–ª—å —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º",
            "recommended_for": "production"
        },
        "gemini-1.5-flash": {
            "name": "Gemini 1.5 Flash",
            "description": "–ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å —Å —Ö–æ—Ä–æ—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º",
            "recommended_for": "development"
        },
        "gemini-2.0-flash-lite": {
            "name": "Gemini 2.0 Flash Lite",
            "description": "–ù–æ–≤–∞—è –ª–µ–≥–∫–∞—è –∏ –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å",
            "recommended_for": "development"
        }
    }
    
    def __init__(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        if settings.gemini_model not in self.AVAILABLE_MODELS:
            logger.warning(
                f"Model {settings.gemini_model} not in supported list. "
                f"Supported models: {list(self.AVAILABLE_MODELS.keys())}"
            )
        
        self.model = genai.GenerativeModel(settings.gemini_model)
        model_info = self.AVAILABLE_MODELS.get(settings.gemini_model, {})
        logger.info(
            f"Initialized Gemini service with model: {settings.gemini_model} "
            f"({model_info.get('name', 'Unknown')})"
        )
        self.safety_settings = [
            {
                "category": "HARM_CATEGORY_HARASSMENT",
                "threshold": "BLOCK_NONE"
            },
            {
                "category": "HARM_CATEGORY_HATE_SPEECH", 
                "threshold": "BLOCK_NONE"
            },
            {
                "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                "threshold": "BLOCK_NONE"
            },
            {
                "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                "threshold": "BLOCK_NONE"
            }
        ]
    
    async def generate_response(
        self,
        girlfriend_profile: GirlfriendProfile,
        user_message: str,
        conversation_context: Optional[str] = None
    ) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –¥–µ–≤—É—à–∫–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            system_prompt = girlfriend_profile.get_full_prompt()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            if conversation_context:
                system_prompt += f"\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n{conversation_context}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            full_prompt = f"{system_prompt}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: {user_message}\n\n–û—Ç–≤–µ—Ç—å –∫–∞–∫ {girlfriend_profile.name}:"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = await self.model.generate_content_async(
                full_prompt,
                safety_settings=self.safety_settings
            )
            
            if response.text:
                logger.info(f"Generated response for profile {girlfriend_profile.name}")
                return response.text.strip()
            else:
                logger.warning("Empty response from Gemini")
                return "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å... üòî"
                
        except Exception as e:
            logger.error(f"Error generating response: {e}")
            return "–ü—Ä–æ—Å—Ç–∏, —É –º–µ–Ω—è —Å–µ–π—á–∞—Å –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º... –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –µ—â–µ —Ä–∞–∑ üòä"
    
    async def generate_profile_suggestions(self, user_preferences: str) -> dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –¥–µ–≤—É—à–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            prompt = f"""
            –ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –¥–µ–≤—É—à–∫–∏.
            
            –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_preferences}
            
            –°–æ–∑–¥–∞–π JSON —Å –ø–æ–ª—è–º–∏:
            - name: –∏–º—è –¥–µ–≤—É—à–∫–∏
            - age: –≤–æ–∑—Ä–∞—Å—Ç (18-30)
            - personality: –æ–ø–∏—Å–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
            - appearance: –æ–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
            - interests: –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ —Ö–æ–±–±–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
            - background: –∫—Ä–∞—Ç–∫–∞—è –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
            - communication_style: —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
            
            –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ JSON –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞.
            """
            
            response = await self.model.generate_content_async(
                prompt,
                safety_settings=self.safety_settings
            )
            
            if response.text:
                # –ü–æ–ø—ã—Ç–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON
                import json
                try:
                    return json.loads(response.text.strip())
                except json.JSONDecodeError:
                    logger.warning("Failed to parse JSON from Gemini response")
                    return self._get_default_profile()
            else:
                return self._get_default_profile()
                
        except Exception as e:
            logger.error(f"Error generating profile suggestions: {e}")
            return self._get_default_profile()
    
    def _get_default_profile(self) -> dict:
        """–ü—Ä–æ—Ñ–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            "name": "–ê–Ω–Ω–∞",
            "age": 23,
            "personality": "–î–æ–±—Ä–∞—è –∏ –æ—Ç–∑—ã–≤—á–∏–≤–∞—è –¥–µ–≤—É—à–∫–∞ —Å —Ö–æ—Ä–æ—à–∏–º —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞. –õ—é–±–∏—Ç –æ–±—â–∞—Ç—å—Å—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –±–ª–∏–∑–∫–∏—Ö –ª—é–¥–µ–π.",
            "appearance": "–ü—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è –¥–µ–≤—É—à–∫–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–æ—Å—Ç–∞ —Å –¥–ª–∏–Ω–Ω—ã–º–∏ —Ç–µ–º–Ω—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏ –∏ –∫–∞—Ä–∏–º–∏ –≥–ª–∞–∑–∞–º–∏.",
            "interests": "—á—Ç–µ–Ω–∏–µ, —Ñ–∏–ª—å–º—ã, –º—É–∑—ã–∫–∞, –ø—Ä–æ–≥—É–ª–∫–∏, –∫—É–ª–∏–Ω–∞—Ä–∏—è",
            "background": "–°—Ç—É–¥–µ–Ω—Ç–∫–∞ —É–Ω–∏–≤–µ—Ä—Å–∏—Ç–µ—Ç–∞, –∏–∑—É—á–∞–µ—Ç –ø—Å–∏—Ö–æ–ª–æ–≥–∏—é. –ñ–∏–≤–µ—Ç –≤ –±–æ–ª—å—à–æ–º –≥–æ—Ä–æ–¥–µ, –ª—é–±–∏—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–æ–≤–∞—Ç—å.",
            "communication_style": "–û–±—â–∞–µ—Ç—Å—è —Ç–µ–ø–ª–æ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω–æ, —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —ç–º–æ–¥–∑–∏. –õ—é–±–∏—Ç –∑–∞–¥–∞–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏ –ø—Ä–æ—è–≤–ª—è—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å –∫ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É."
        }
    
    async def moderate_content(self, text: str) -> bool:
        """–ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (–±–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞)"""
        try:
            # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∑–∞–ø—Ä–µ—â–µ–Ω–Ω—ã–µ —Å–ª–æ–≤–∞
            forbidden_words = ["—É–±–∏—Ç—å", "—Å–º–µ—Ä—Ç—å", "—Å—É–∏—Ü–∏–¥", "–Ω–∞—Ä–∫–æ—Ç–∏–∫–∏"]
            text_lower = text.lower()
            
            for word in forbidden_words:
                if word in text_lower:
                    return False
            
            return True
            
        except Exception as e:
            logger.error(f"Error in content moderation: {e}")
            return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    
    def get_model_info(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏"""
        model_info = self.AVAILABLE_MODELS.get(settings.gemini_model, {})
        return {
            "model_id": settings.gemini_model,
            "name": model_info.get("name", "Unknown Model"),
            "description": model_info.get("description", "No description available"),
            "recommended_for": model_info.get("recommended_for", "general")
        }
    
    @classmethod
    def get_available_models(cls) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        return cls.AVAILABLE_MODELS