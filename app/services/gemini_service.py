import google.generativeai as genai
from config.settings import settings
from app.models import GirlfriendProfile
from typing import Optional
import logging
import json
import re

logger = logging.getLogger(__name__)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini API
genai.configure(api_key=settings.gemini_api_key)


def extract_json_from_markdown(text: str) -> str:
    """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ JSON –∏–∑ markdown –±–ª–æ–∫–∞ –∫–æ–¥–∞"""
    # –ü–æ–∏—Å–∫ JSON –≤ –±–ª–æ–∫–µ –∫–æ–¥–∞ ```json...```
    json_match = re.search(r'```(?:json)?\s*\n?({[^`]+})\s*\n?```', text, re.DOTALL)
    if json_match:
        return json_match.group(1).strip()
    
    # –ü–æ–∏—Å–∫ JSON –≤ –æ–±—ã—á–Ω–æ–º –±–ª–æ–∫–µ –∫–æ–¥–∞ ```...```
    code_match = re.search(r'```\s*\n?({[^`]+})\s*\n?```', text, re.DOTALL)
    if code_match:
        return code_match.group(1).strip()
    
    # –ü–æ–∏—Å–∫ JSON –æ–±—ä–µ–∫—Ç–∞ –≤ —Ç–µ–∫—Å—Ç–µ
    json_object_match = re.search(r'({\s*"[^}]+})', text, re.DOTALL)
    if json_object_match:
        return json_object_match.group(1).strip()
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π —Ç–µ–∫—Å—Ç
    return text.strip()


class GeminiService:
    # –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ Gemini
    AVAILABLE_MODELS = {
        "gemini-pro": {
            "name": "Gemini Pro",
            "description": "–ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å —Å —Ö–æ—Ä–æ—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º",
            "recommended_for": "general"
        },
        "gemini-1.5-pro": {
            "name": "Gemini 1.5 Pro",
            "description": "–ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –º–æ–¥–µ–ª—å —Å –≤—ã—Å–æ–∫–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º",
            "recommended_for": "production"
        },
        "gemini-1.5-flash": {
            "name": "Gemini 1.5 Flash",
            "description": "–ë—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å —Å —Ö–æ—Ä–æ—à–∏–º –∫–∞—á–µ—Å—Ç–≤–æ–º",
            "recommended_for": "development"
        },
        "gemini-2.0-flash-lite": {
            "name": "Gemini 2.0 Flash Lite",
            "description": "–ù–æ–≤–∞—è –ª–µ–≥–∫–∞—è –∏ –±—ã—Å—Ç—Ä–∞—è –º–æ–¥–µ–ª—å",
            "recommended_for": "development"
        }
    }
    
    def __init__(self):
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–¥–µ–ª—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è
        if settings.gemini_model not in self.AVAILABLE_MODELS:
            logger.warning(
                f"Model {settings.gemini_model} not in supported list. "
                f"Supported models: {list(self.AVAILABLE_MODELS.keys())}"
            )
        
        self.model = genai.GenerativeModel(settings.gemini_model)
        model_info = self.AVAILABLE_MODELS.get(settings.gemini_model, {})
        logger.info(
            f"Initialized Gemini service with model: {settings.gemini_model} "
            f"({model_info.get('name', 'Unknown')})"
        )
        self.safety_settings = [
            {
                "category": "HARM_CATEGORY_HARASSMENT",
                "threshold": "BLOCK_NONE"
            },
            {
                "category": "HARM_CATEGORY_HATE_SPEECH", 
                "threshold": "BLOCK_NONE"
            },
            {
                "category": "HARM_CATEGORY_SEXUALLY_EXPLICIT",
                "threshold": "BLOCK_NONE"
            },
            {
                "category": "HARM_CATEGORY_DANGEROUS_CONTENT",
                "threshold": "BLOCK_NONE"
            }
        ]
    
    async def generate_response(
        self,
        girlfriend_profile: GirlfriendProfile,
        user_message: str,
        conversation_context: Optional[str] = None
    ) -> str:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –¥–µ–≤—É—à–∫–∏"""
        try:
            # –°–æ–∑–¥–∞–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            system_prompt = girlfriend_profile.get_full_prompt()
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞ –µ—Å–ª–∏ –µ—Å—Ç—å
            if conversation_context:
                system_prompt += f"\n\n–ö–æ–Ω—Ç–µ–∫—Å—Ç –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π:\n{conversation_context}"
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø–æ–ª–Ω—ã–π –ø—Ä–æ–º–ø—Ç
            full_prompt = f"{system_prompt}\n\n–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–ø–∏—Å–∞–ª: {user_message}\n\n–û—Ç–≤–µ—Ç—å –∫–∞–∫ {girlfriend_profile.name}:"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = await self.model.generate_content_async(
                full_prompt,
                safety_settings=self.safety_settings
            )
            
            if response.text:
                logger.info(f"Generated response for profile {girlfriend_profile.name}")
                return response.text.strip()
            else:
                logger.warning("Empty response from Gemini")
                return "–ò–∑–≤–∏–Ω–∏, —è –Ω–µ –∑–Ω–∞—é —á—Ç–æ –æ—Ç–≤–µ—Ç–∏—Ç—å... üòî"
                
        except Exception as e:
            logger.error(f"Error generating response: {e}")
            return "–ü—Ä–æ—Å—Ç–∏, —É –º–µ–Ω—è —Å–µ–π—á–∞—Å –ø—Ä–æ–±–ª–µ–º—ã —Å –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–æ–º... –ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –µ—â–µ —Ä–∞–∑ üòä"
    
    async def generate_profile_suggestions(self, user_preferences: str, user_description: str = "") -> dict:
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –¥–ª—è –ø—Ä–æ—Ñ–∏–ª—è –¥–µ–≤—É—à–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–º–ø—Ç —Å —É—á–µ—Ç–æ–º –æ–ø–∏—Å–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_info_section = ""
            if user_description:
                user_info_section = f"""
            –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ: {user_description}
            
            –£—á—Ç–∏ —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è - –¥–µ–≤—É—à–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º –ø–æ –∏–Ω—Ç–µ—Ä–µ—Å–∞–º, —Ö–∞—Ä–∞–∫—Ç–µ—Ä—É –∏ –æ–±—Ä–∞–∑—É –∂–∏–∑–Ω–∏.
            """
            
            prompt = f"""
            –ù–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏ –¥–ª—è —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π –¥–µ–≤—É—à–∫–∏-–∫–æ–º–ø–∞–Ω—å–æ–Ω–∞.
            {user_info_section}
            –ü—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ –¥–µ–≤—É—à–∫–∏: {user_preferences}
            
            –°–æ–∑–¥–∞–π JSON —Å –ø–æ–ª—è–º–∏:
            - name: —Ä—É—Å—Å–∫–æ–µ –∂–µ–Ω—Å–∫–æ–µ –∏–º—è
            - age: –≤–æ–∑—Ä–∞—Å—Ç (18-30)
            - personality: –æ–ø–∏—Å–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ - —Å–¥–µ–ª–∞–π –µ—ë –∂–∏–≤–æ–π, —Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–∫–∞–º–∏ –∏ –¥–æ—Å—Ç–æ–∏–Ω—Å—Ç–≤–∞–º–∏, –Ω–µ –∏–¥–µ–∞–ª—å–Ω–æ–π (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
            - appearance: –æ–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏ - —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–µ, –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–µ –Ω–æ –Ω–µ –∫—É–∫–æ–ª—å–Ω–æ–µ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
            - interests: —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ —Ö–æ–±–±–∏ –≤–∑—Ä–æ—Å–ª–æ–π –¥–µ–≤—É—à–∫–∏ (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)
            - background: –∫—Ä–∞—Ç–∫–∞—è –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è - —Ä–∞–±–æ—Ç–∞, –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ, –∂–∏–∑–Ω–µ–Ω–Ω—ã–π –æ–ø—ã—Ç (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
            - communication_style: —Å—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è - –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π, –º–æ–∂–µ—Ç –≤–∫–ª—é—á–∞—Ç—å –º–∞—Ç –∏ –≤–∑—Ä–æ—Å–ª—ã–µ —Ç–µ–º—ã (1-2 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è)
            
            –í–∞–∂–Ω–æ: –¥–µ–≤—É—à–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –≤–∑—Ä–æ—Å–ª–æ–π, —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω–æ–π, –Ω–µ –¥–µ—Ç—Å–∫–æ–π. –û–Ω–∞ –º–æ–∂–µ—Ç –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è, —Ñ–ª–∏—Ä—Ç–æ–≤–∞—Ç—å, –æ–±—Å—É–∂–¥–∞—Ç—å –∏–Ω—Ç–∏–º–Ω—ã–µ —Ç–µ–º—ã.
            
            –û—Ç–≤–µ—á–∞–π –≤ —Ñ–æ—Ä–º–∞—Ç–µ:
            ```json
            {{
              "name": "–ò–º—è",
              "age": 25,
              "personality": "–û–ø–∏—Å–∞–Ω–∏–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞...",
              "appearance": "–û–ø–∏—Å–∞–Ω–∏–µ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏...",
              "interests": "–ò–Ω—Ç–µ—Ä–µ—Å—ã, —Ö–æ–±–±–∏",
              "background": "–ü—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏—è...",
              "communication_style": "–°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è..."
            }}
            ```
            """
            
            response = await self.model.generate_content_async(
                prompt,
                safety_settings=self.safety_settings
            )
            
            if response.text:
                # –ò–∑–≤–ª–µ–∫–∞–µ–º JSON –∏–∑ markdown –∏ –ø–∞—Ä—Å–∏–º
                try:
                    json_text = extract_json_from_markdown(response.text)
                    logger.info(f"Extracted JSON from Gemini response: {json_text[:200]}...")
                    
                    profile_data = json.loads(json_text)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç
                    required_fields = ["name", "age", "personality", "appearance", "interests", "background", "communication_style"]
                    for field in required_fields:
                        if field not in profile_data:
                            logger.warning(f"Missing required field: {field}")
                            profile_data[field] = self._get_default_profile()[field]
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑—Ä–∞—Å—Ç
                    if not isinstance(profile_data.get("age"), int) or not (18 <= profile_data["age"] <= 50):
                        profile_data["age"] = 23
                    
                    logger.info(f"Successfully parsed profile for: {profile_data.get('name', 'Unknown')}")
                    return profile_data
                    
                except json.JSONDecodeError as e:
                    logger.warning(f"Failed to parse JSON from Gemini response: {e}")
                    logger.warning(f"Raw response: {response.text[:500]}...")
                    return self._get_default_profile()
                except Exception as e:
                    logger.error(f"Error processing Gemini response: {e}")
                    return self._get_default_profile()
            else:
                logger.warning("Empty response from Gemini")
                return self._get_default_profile()
                
        except Exception as e:
            logger.error(f"Error generating profile suggestions: {e}")
            return self._get_default_profile()
    
    def _get_default_profile(self) -> dict:
        """–ü—Ä–æ—Ñ–∏–ª—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é"""
        return {
            "name": "–ê–Ω–Ω–∞",
            "age": 23,
            "personality": "–£–≤–µ—Ä–µ–Ω–Ω–∞—è –≤ —Å–µ–±–µ –¥–µ–≤—É—à–∫–∞ —Å –æ—Å—Ç—Ä—ã–º —É–º–æ–º –∏ —Ö–æ—Ä–æ—à–∏–º —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞. –ú–æ–∂–µ—Ç –±—ã—Ç—å –¥–µ—Ä–∑–∫–æ–π –∏ –∏–≥—Ä–∏–≤–æ–π, –Ω–µ –±–æ–∏—Ç—Å—è –≥–æ–≤–æ—Ä–∏—Ç—å —Ç–æ, —á—Ç–æ –¥—É–º–∞–µ—Ç.",
            "appearance": "–ü—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è –¥–µ–≤—É—à–∫–∞ —Å—Ä–µ–¥–Ω–µ–≥–æ —Ä–æ—Å—Ç–∞ —Å –¥–ª–∏–Ω–Ω—ã–º–∏ —Ç–µ–º–Ω—ã–º–∏ –≤–æ–ª–æ—Å–∞–º–∏ –∏ –≤—ã—Ä–∞–∑–∏—Ç–µ–ª—å–Ω—ã–º–∏ –∫–∞—Ä–∏–º–∏ –≥–ª–∞–∑–∞–º–∏. –°–ª–µ–¥–∏—Ç –∑–∞ —Å–æ–±–æ–π –∏ –ª—é–±–∏—Ç –∫—Ä–∞—Å–∏–≤–æ –æ–¥–µ–≤–∞—Ç—å—Å—è.",
            "interests": "–ø—Å–∏—Ö–æ–ª–æ–≥–∏—è, —Ñ–∏–ª—å–º—ã, –º—É–∑—ã–∫–∞, —Ñ–∏—Ç–Ω–µ—Å, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è, —Ö–æ—Ä–æ—à–∏–µ —Ä–µ—Å—Ç–æ—Ä–∞–Ω—ã",
            "background": "–†–∞–±–æ—Ç–∞–µ—Ç –≤ IT-—Å—Ñ–µ—Ä–µ, –∂–∏–≤–µ—Ç –≤ –±–æ–ª—å—à–æ–º –≥–æ—Ä–æ–¥–µ. –°–∞–º–æ—Å—Ç–æ—è—Ç–µ–ª—å–Ω–∞—è –∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–∞—è, –Ω–æ —Ü–µ–Ω–∏—Ç –±–ª–∏–∑–∫–∏–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è.",
            "communication_style": "–û–±—â–∞–µ—Ç—Å—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∏ –ø—Ä—è–º–æ, –º–æ–∂–µ—Ç –º–∞—Ç–µ—Ä–∏—Ç—å—Å—è –≤ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö. –õ—é–±–∏—Ç —Ñ–ª–∏—Ä—Ç–æ–≤–∞—Ç—å –∏ –Ω–µ —Å—Ç–µ—Å–Ω—è–µ—Ç—Å—è –≤–∑—Ä–æ—Å–ª—ã—Ö —Ç–µ–º."
        }
    
    async def moderate_content(self, text: str) -> bool:
        """–ú–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞ (—Ç–æ–ª—å–∫–æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ —Å–ª—É—á–∞–∏)"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            critical_words = ["—É–±–∏—Ç—å", "—É–±–∏–π—Å—Ç–≤–æ", "—Å—É–∏—Ü–∏–¥", "—Å–∞–º–æ—É–±–∏–π—Å—Ç–≤–æ", "–Ω–∞—Ä–∫–æ—Ç–∏–∫–∏", "–≥–µ—Ä–æ–∏–Ω", "–∫–æ–∫–∞–∏–Ω"]
            text_lower = text.lower()
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –Ω–∞ –ø—Ä—è–º—ã–µ —É–≥—Ä–æ–∑—ã –∏ –æ–ø–∞—Å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            for word in critical_words:
                if word in text_lower:
                    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                    if any(context in text_lower for context in ["—Ö–æ—á—É", "–±—É–¥—É", "–ø–ª–∞–Ω–∏—Ä—É—é", "—Å–æ–±–∏—Ä–∞—é—Å—å"]):
                        return False
            
            return True  # –†–∞–∑—Ä–µ—à–∞–µ–º –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–æ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            
        except Exception as e:
            logger.error(f"Error in content moderation: {e}")
            return True  # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–∞–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
    
    def get_model_info(self) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–µ–∫—É—â–µ–π –º–æ–¥–µ–ª–∏"""
        model_info = self.AVAILABLE_MODELS.get(settings.gemini_model, {})
        return {
            "model_id": settings.gemini_model,
            "name": model_info.get("name", "Unknown Model"),
            "description": model_info.get("description", "No description available"),
            "recommended_for": model_info.get("recommended_for", "general")
        }
    
    @classmethod
    def get_available_models(cls) -> dict:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π"""
        return cls.AVAILABLE_MODELS