from datetime import datetime, timedelta, timezone
from app.models import Subscription, GirlfriendProfile
from typing import Optional


def format_subscription_info(subscription_info: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
    if not subscription_info["has_subscription"]:
        return (
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏\n\n"
            "üíé –û—Ñ–æ—Ä–º–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫–æ –≤—Å–µ–º —Ñ—É–Ω–∫—Ü–∏—è–º –±–æ—Ç–∞:\n"
            "‚Ä¢ –ù–µ–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–µ –æ–±—â–µ–Ω–∏–µ —Å –¥–µ–≤—É—à–∫–æ–π\n"
            "‚Ä¢ –°–æ–∑–¥–∞–Ω–∏–µ –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª–µ–π\n"
            "‚Ä¢ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–æ–≤\n"
            "‚Ä¢ –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n\n"
            "üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: 299‚ÇΩ/–º–µ—Å—è—Ü"
        )
    
    status_emoji = "üéÅ" if subscription_info["is_trial"] else "üíé"
    status_text = "–ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥" if subscription_info["is_trial"] else "–ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞"
    
    end_date = subscription_info["end_date"]
    if isinstance(end_date, datetime):
        end_date_str = end_date.strftime("%d.%m.%Y %H:%M")
    else:
        end_date_str = str(end_date)
    
    days_left = subscription_info["days_left"]
    
    return (
        f"{status_emoji} {status_text}\n\n"
        f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {end_date_str}\n"
        f"‚è∞ –û—Å—Ç–∞–ª–æ—Å—å –¥–Ω–µ–π: {days_left}\n\n"
        f"{'üîÑ –ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–¥–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É!' if days_left <= 3 else '‚úÖ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω—ã'}"
    )


def format_profile_info(profile: GirlfriendProfile) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–æ—Ñ–∏–ª–µ –¥–µ–≤—É—à–∫–∏"""
    info_parts = [f"üë§ **{profile.name}**"]
    
    if profile.age:
        info_parts.append(f"üéÇ –í–æ–∑—Ä–∞—Å—Ç: {profile.age} –ª–µ—Ç")
    
    if profile.personality:
        info_parts.append(f"üí≠ –•–∞—Ä–∞–∫—Ç–µ—Ä: {profile.personality}")
    
    if profile.appearance:
        info_parts.append(f"üëó –í–Ω–µ—à–Ω–æ—Å—Ç—å: {profile.appearance}")
    
    if profile.interests:
        info_parts.append(f"üéØ –ò–Ω—Ç–µ—Ä–µ—Å—ã: {profile.interests}")
    
    if profile.background:
        info_parts.append(f"üìñ –ò—Å—Ç–æ—Ä–∏—è: {profile.background}")
    
    if profile.communication_style:
        info_parts.append(f"üí¨ –°—Ç–∏–ª—å –æ–±—â–µ–Ω–∏—è: {profile.communication_style}")
    
    return "\n\n".join(info_parts)


def format_conversation_stats(stats: dict) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    if stats["total_messages"] == 0:
        return "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:\n\n–í—ã –µ—â–µ –Ω–µ –Ω–∞—á–∞–ª–∏ –æ–±—â–µ–Ω–∏–µ —Å –¥–µ–≤—É—à–∫–æ–π."
    
    first_date = stats["first_message_date"]
    last_date = stats["last_message_date"]
    
    if isinstance(first_date, datetime):
        first_date_str = first_date.strftime("%d.%m.%Y")
    else:
        first_date_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    if isinstance(last_date, datetime):
        last_date_str = last_date.strftime("%d.%m.%Y %H:%M")
    else:
        last_date_str = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    return (
        f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞:\n\n"
        f"üí¨ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']}\n"
        f"üë§ –í–∞—à–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['user_messages']}\n"
        f"üíï –°–æ–æ–±—â–µ–Ω–∏–π –¥–µ–≤—É—à–∫–∏: {stats['assistant_messages']}\n\n"
        f"üìÖ –ü–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {first_date_str}\n"
        f"üïê –ü–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {last_date_str}"
    )


def validate_age(age_str: str) -> Optional[int]:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    try:
        age = int(age_str)
        if 18 <= age <= 50:
            return age
        return None
    except ValueError:
        return None


def validate_name(name: str) -> bool:
    """–í–∞–ª–∏–¥–∞—Ü–∏—è –∏–º–µ–Ω–∏"""
    if not name or len(name.strip()) < 2:
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∏–º—è —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã –∏ –ø—Ä–æ–±–µ–ª—ã
    return all(c.isalpha() or c.isspace() for c in name.strip())


def truncate_text(text: str, max_length: int = 100) -> str:
    """–û–±—Ä–µ–∑–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –¥–æ —É–∫–∞–∑–∞–Ω–Ω–æ–π –¥–ª–∏–Ω—ã"""
    if len(text) <= max_length:
        return text
    return text[:max_length-3] + "..."


def get_greeting_message() -> str:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—Ä–µ–º–µ–Ω–∏"""
    current_hour = datetime.now().hour
    
    if 5 <= current_hour < 12:
        return "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄÔ∏è"
    elif 12 <= current_hour < 17:
        return "–î–æ–±—Ä—ã–π –¥–µ–Ω—å! üå§Ô∏è"
    elif 17 <= current_hour < 22:
        return "–î–æ–±—Ä—ã–π –≤–µ—á–µ—Ä! üåÜ"
    else:
        return "–î–æ–±—Ä–æ–π –Ω–æ—á–∏! üåô"


def format_payment_amount(amount: float) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å—É–º–º—ã –ø–ª–∞—Ç–µ–∂–∞"""
    return f"{amount:.0f}‚ÇΩ"


def is_trial_expired(trial_start_date: datetime, trial_days: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–µ—á–µ–Ω–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    if not trial_start_date:
        return True
    
    expiry_date = trial_start_date + timedelta(days=trial_days)
    current_time = datetime.now(timezone.utc)
    
    # –ï—Å–ª–∏ trial_start_date –Ω–µ —Å–æ–¥–µ—Ä–∂–∏—Ç timezone, —Å—á–∏—Ç–∞–µ–º –µ–≥–æ UTC
    if trial_start_date.tzinfo is None:
        trial_start_date = trial_start_date.replace(tzinfo=timezone.utc)
        expiry_date = trial_start_date + timedelta(days=trial_days)
    
    return current_time > expiry_date


async def safe_edit_message(message, new_text: str, reply_markup=None, parse_mode=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–∏–∑–±–µ–≥–∞–µ—Ç –æ—à–∏–±–∫–∏ 'message is not modified')"""
    current_text = message.text or ""
    current_markup = message.reply_markup
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è –ª–∏ –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    text_changed = current_text != new_text
    markup_changed = current_markup != reply_markup
    
    if text_changed or markup_changed:
        kwargs = {"text": new_text}
        if reply_markup is not None:
            kwargs["reply_markup"] = reply_markup
        if parse_mode is not None:
            kwargs["parse_mode"] = parse_mode
            
        await message.edit_text(**kwargs)
        return True
    return False