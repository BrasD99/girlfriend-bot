from functools import wraps
from aiogram import types
from app.services.database import db_service
from app.services.user_service import UserService
from app.services.subscription_service import SubscriptionService
from app.services.redis_rate_limiter import redis_rate_limiter
import logging

logger = logging.getLogger(__name__)

def subscription_required(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ª–∏—á–∏—è –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏"""
    @wraps(func)
    async def wrapper(message_or_callback, *args, **kwargs):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ (—Å–æ–æ–±—â–µ–Ω–∏–µ –∏–ª–∏ callback)
        if isinstance(message_or_callback, types.Message):
            user_id = message_or_callback.from_user.id
            chat_id = message_or_callback.chat.id
            bot = message_or_callback.bot
        elif isinstance(message_or_callback, types.CallbackQuery):
            user_id = message_or_callback.from_user.id
            chat_id = message_or_callback.message.chat.id
            bot = message_or_callback.bot
        else:
            logger.error("Unsupported object type in subscription_required decorator")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å–∫—É
        async with db_service.async_session() as session:
            user = await UserService.get_user_by_telegram_id(session, user_id)
            if not user:
                await bot.send_message(
                    chat_id,
                    "‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏."
                )
                return
            
            has_subscription = await SubscriptionService.is_user_subscribed(session, user.id)
            if not has_subscription:
                await bot.send_message(
                    chat_id,
                    "‚ùå –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —ç—Ç–æ–π —Ñ—É–Ω–∫—Ü–∏–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–∞ –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞.\n\n"
                    "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /subscription –¥–ª—è –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∏."
                )
                return
        
        # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –µ—Å—Ç—å, –≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        return await func(message_or_callback, *args, **kwargs)
    
    return wrapper


def rate_limit(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è rate limiting"""
    @wraps(func)
    async def wrapper(message_or_callback, *args, **kwargs):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞ –∏ –ø–æ–ª—É—á–∞–µ–º user_id
        if isinstance(message_or_callback, types.Message):
            user_id = message_or_callback.from_user.id
            chat_id = message_or_callback.chat.id
            bot = message_or_callback.bot
            is_callback = False
        elif isinstance(message_or_callback, types.CallbackQuery):
            user_id = message_or_callback.from_user.id
            chat_id = message_or_callback.message.chat.id
            bot = message_or_callback.bot
            is_callback = True
        else:
            logger.error("Unsupported object type in rate_limit decorator")
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º rate limit
        limit_result = await redis_rate_limiter.check_rate_limit(user_id)
        
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω
        if limit_result['banned']:
            ban_remaining = limit_result['ban_remaining']
            if ban_remaining > 0:
                ban_message = f"üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏–π! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —á–µ—Ä–µ–∑ {ban_remaining} —Å–µ–∫."
                
                if is_callback:
                    # –î–ª—è callback_query –∏—Å–ø–æ–ª—å–∑—É–µ–º answer —Å show_alert
                    await message_or_callback.answer(ban_message, show_alert=True)
                else:
                    # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await bot.send_message(
                        chat_id,
                        f"üö´ **–°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π!**\n\n"
                        f"–í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã –≤ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏–π.\n"
                        f"‚è∞ –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞ —á–µ—Ä–µ–∑ {ban_remaining} —Å–µ–∫.",
                        parse_mode="Markdown"
                    )
            # –ù–ï –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–±–∞–Ω–µ–Ω
            return
        
        # –ï—Å–ª–∏ –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        if limit_result['warning']:
            warning_message = f"‚ö†Ô∏è –í–Ω–∏–º–∞–Ω–∏–µ! –û—Å—Ç–∞–ª–æ—Å—å –¥–µ–π—Å—Ç–≤–∏–π: {limit_result['remaining']}"
            
            if is_callback:
                # –î–ª—è callback_query –∏—Å–ø–æ–ª—å–∑—É–µ–º answer –±–µ–∑ show_alert
                await message_or_callback.answer(warning_message, show_alert=False)
            else:
                # –î–ª—è –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await bot.send_message(
                    chat_id,
                    f"‚ö†Ô∏è **–í–Ω–∏–º–∞–Ω–∏–µ!**\n\n"
                    f"–í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –±—ã—Å—Ç—Ä–æ.\n"
                    f"–û—Å—Ç–∞–ª–æ—Å—å —Å–æ–æ–±—â–µ–Ω–∏–π: {limit_result['remaining']}\n"
                    f"–ü—Ä–∏ –ø—Ä–µ–≤—ã—à–µ–Ω–∏–∏ –ª–∏–º–∏—Ç–∞ –≤—ã –±—É–¥–µ—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω—ã.",
                    parse_mode="Markdown"
                )
        
        # –ï—Å–ª–∏ –ª–∏–º–∏—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω, –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –≤—ã–ø–æ–ª–Ω—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        if limit_result['allowed']:
            # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¢–û–õ–¨–ö–û –µ—Å–ª–∏ –æ–Ω–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ
            await redis_rate_limiter.record_message(user_id)
            return await func(message_or_callback, *args, **kwargs)
        else:
            # –õ–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ—â–µ –Ω–µ –∑–∞–±–∞–Ω–µ–Ω (–Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç—å)
            limit_message = "üö´ –ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            
            if is_callback:
                await message_or_callback.answer(limit_message, show_alert=True)
            else:
                await bot.send_message(chat_id, limit_message)
            # –ù–ï –∑–∞–ø–∏—Å—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, –µ—Å–ª–∏ –ª–∏–º–∏—Ç –ø—Ä–µ–≤—ã—à–µ–Ω
            return
    
    return wrapper


def user_required(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    @wraps(func)
    async def wrapper(message_or_callback, *args, **kwargs):
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –æ–±—ä–µ–∫—Ç–∞
        if isinstance(message_or_callback, types.Message):
            user_data = message_or_callback.from_user
        elif isinstance(message_or_callback, types.CallbackQuery):
            user_data = message_or_callback.from_user
        else:
            logger.error("Unsupported object type in user_required decorator")
            return
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –∏–ª–∏ –ø–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        async with db_service.async_session() as session:
            user = await UserService.get_or_create_user(
                session,
                telegram_id=user_data.id,
                username=user_data.username,
                first_name=user_data.first_name,
                last_name=user_data.last_name,
                language_code=user_data.language_code or "ru"
            )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ kwargs
        kwargs['user'] = user
        
        return await func(message_or_callback, *args, **kwargs)
    
    return wrapper


def error_handler(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    @wraps(func)
    async def wrapper(*args, **kwargs):
        try:
            return await func(*args, **kwargs)
        except Exception as e:
            logger.error(f"Error in {func.__name__}: {e}", exc_info=True)
            
            # –ü—ã—Ç–∞–µ–º—Å—è –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            message_or_callback = args[0] if args else None
            if isinstance(message_or_callback, (types.Message, types.CallbackQuery)):
                try:
                    if isinstance(message_or_callback, types.Message):
                        await message_or_callback.answer(
                            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
                        )
                    else:
                        await message_or_callback.answer(
                            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                            show_alert=True
                        )
                except:
                    pass
    
    return wrapper