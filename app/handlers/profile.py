from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from app.services.database import db_service
from app.services.girlfriend_service import GirlfriendService
from app.services.gemini_service import GeminiService
from app.utils.keyboards import (
    get_profile_keyboard, get_profile_creation_keyboard, 
    get_profile_edit_keyboard, get_confirmation_keyboard
)
from app.utils.decorators import user_required, subscription_required, error_handler
from app.utils.helpers import format_profile_info, validate_age, validate_name, safe_edit_message
from app.utils.states import ProfileCreation, ProfileEditing
import logging

logger = logging.getLogger(__name__)
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å Gemini
gemini_service = GeminiService()


@router.message(Command("profile"))
@router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å –¥–µ–≤—É—à–∫–∏")
@error_handler
@user_required
@subscription_required
async def profile_menu(message: types.Message, user):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª–µ–º –¥–µ–≤—É—à–∫–∏"""
    async with db_service.async_session() as session:
        profile = await GirlfriendService.get_active_profile(session, user.id)
        
        if profile:
            text = f"üë§ **–ê–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å:**\n\n{format_profile_info(profile)}"
            keyboard = get_profile_keyboard(True)
        else:
            text = (
                "üë§ **–ü—Ä–æ—Ñ–∏–ª—å –¥–µ–≤—É—à–∫–∏**\n\n"
                "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–µ–≤—É—à–∫–∏.\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ!"
            )
            keyboard = get_profile_keyboard(False)
    
    await message.answer(text, reply_markup=keyboard, parse_mode="Markdown")


@router.callback_query(F.data == "create_profile")
@error_handler
async def create_profile_callback(callback: types.CallbackQuery):
    """–í—ã–±–æ—Ä —Å–ø–æ—Å–æ–±–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    text = (
        "üë§ **–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –¥–µ–≤—É—à–∫–∏**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Å–ø–æ—Å–æ–± —Å–æ–∑–¥–∞–Ω–∏—è:\n\n"
        "üìù **–í—Ä—É—á–Ω—É—é** - –≤—ã —Å–∞–º–∏ –∑–∞–¥–∞–¥–∏—Ç–µ –≤—Å–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏\n"
        "ü§ñ **–° –ø–æ–º–æ—â—å—é –ò–ò** - –æ–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è, –ò–ò —Å–æ–∑–¥–∞—Å—Ç –ø—Ä–æ—Ñ–∏–ª—å\n"
        "üé≤ **–°–ª—É—á–∞–π–Ω—ã–π** - –ò–ò —Å–æ–∑–¥–∞—Å—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_profile_creation_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "create_manual")
@error_handler
async def create_manual_callback(callback: types.CallbackQuery, state: FSMContext):
    """–†—É—á–Ω–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    await state.set_state(ProfileCreation.waiting_for_name)
    
    text = (
        "üë§ **–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è –≤—Ä—É—á–Ω—É—é**\n\n"
        "–î–∞–≤–∞–π—Ç–µ —Å–æ–∑–¥–∞–¥–∏–º –ø—Ä–æ—Ñ–∏–ª—å –≤–∞—à–µ–π –∏–¥–µ–∞–ª—å–Ω–æ–π –¥–µ–≤—É—à–∫–∏!\n\n"
        "–®–∞–≥ 1/6: –ö–∞–∫ –∑–æ–≤—É—Ç –≤–∞—à—É –¥–µ–≤—É—à–∫—É?\n"
        "–í–≤–µ–¥–∏—Ç–µ –∏–º—è:"
    )
    
    await callback.message.edit_text(text, parse_mode="Markdown")
    await callback.answer()


@router.callback_query(F.data == "create_ai")
@error_handler
async def create_ai_callback(callback: types.CallbackQuery, state: FSMContext):
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Å –ø–æ–º–æ—â—å—é –ò–ò"""
    await state.set_state(ProfileCreation.waiting_for_preferences)
    
    text = (
        "ü§ñ **–°–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è —Å –ø–æ–º–æ—â—å—é –ò–ò**\n\n"
        "–û–ø–∏—à–∏—Ç–µ, –∫–∞–∫—É—é –¥–µ–≤—É—à–∫—É –≤—ã —Ö–æ—Ç–µ–ª–∏ –±—ã –≤–∏–¥–µ—Ç—å:\n\n"
        "–ù–∞–ø—Ä–∏–º–µ—Ä:\n"
        "‚Ä¢ –î–æ–±—Ä–∞—è –∏ –≤–µ—Å–µ–ª–∞—è –±–ª–æ–Ω–¥–∏–Ω–∫–∞ 25 –ª–µ—Ç\n"
        "‚Ä¢ –£–º–Ω–∞—è –±—Ä—é–Ω–µ—Ç–∫–∞, –ª—é–±–∏—Ç –∫–Ω–∏–≥–∏ –∏ –∫–∏–Ω–æ\n"
        "‚Ä¢ –°–ø–æ—Ä—Ç–∏–≤–Ω–∞—è –¥–µ–≤—É—à–∫–∞ —Å —á—É–≤—Å—Ç–≤–æ–º —é–º–æ—Ä–∞\n\n"
        "–û–ø–∏—à–∏—Ç–µ –≤–∞—à–∏ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è:"
    )
    
    await callback.message.edit_text(text, parse_mode="Markdown")
    await callback.answer()


@router.callback_query(F.data == "create_random")
@error_handler
@user_required
async def create_random_callback(callback: types.CallbackQuery, user):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è (–∏–∑ –º–µ–Ω—é —Å–æ–∑–¥–∞–Ω–∏—è)"""
    await _create_random_profile(callback, user)


@router.callback_query(F.data == "random_profile")
@error_handler
@user_required
async def random_profile_callback(callback: types.CallbackQuery, user):
    """–°–æ–∑–¥–∞–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è (–∏–∑ –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è)"""
    await _create_random_profile(callback, user)


async def _create_random_profile(callback: types.CallbackQuery, user):
    """–û–±—â–∞—è –ª–æ–≥–∏–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è"""
    await callback.message.edit_text("üé≤ –°–æ–∑–¥–∞—é —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è
        async with db_service.async_session() as session:
            existing_profile = await GirlfriendService.get_active_profile(session, user.id)
            
            if existing_profile:
                await callback.message.edit_text(
                    "‚ö†Ô∏è –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å.\n\n"
                    "–£–¥–∞–ª–∏—Ç–µ —Ç–µ–∫—É—â–∏–π –ø—Ä–æ—Ñ–∏–ª—å –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –Ω–æ–≤—ã–π —á–µ—Ä–µ–∑ –º–µ–Ω—é '–°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å'.",
                    reply_markup=get_profile_keyboard(True)
                )
                await callback.answer("‚ö†Ô∏è –ü—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç", show_alert=True)
                return
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
        profile_data = await gemini_service.generate_profile_suggestions(
            "–°–æ–∑–¥–∞–π —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –ø—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–æ–π –¥–µ–≤—É—à–∫–∏ —Å —É–Ω–∏–∫–∞–ª—å–Ω—ã–º–∏ —á–µ—Ä—Ç–∞–º–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –∏ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏"
        )
        
        async with db_service.async_session() as session:
            profile = await GirlfriendService.create_girlfriend_profile(
                session,
                user,
                name=profile_data.get("name", "–ê–Ω–Ω–∞"),
                age=profile_data.get("age", 23),
                personality=profile_data.get("personality", "–î–æ–±—Ä–∞—è –∏ –æ—Ç–∑—ã–≤—á–∏–≤–∞—è"),
                appearance=profile_data.get("appearance", "–ü—Ä–∏–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω–∞—è –¥–µ–≤—É—à–∫–∞"),
                interests=profile_data.get("interests", "–ú—É–∑—ã–∫–∞, –∫–Ω–∏–≥–∏, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è"),
                background=profile_data.get("background", "–ò–Ω—Ç–µ—Ä–µ—Å–Ω–∞—è –∏ —Ä–∞–∑–Ω–æ—Å—Ç–æ—Ä–æ–Ω–Ω—è—è –ª–∏—á–Ω–æ—Å—Ç—å"),
                communication_style=profile_data.get("communication_style", "–û–±—â–∞–µ—Ç—Å—è –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ —Ç–µ–ø–ª–æ")
            )
        
        success_text = (
            f"üéâ **–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!**\n\n"
            f"{format_profile_info(profile)}\n\n"
            f"üé≤ **–°–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å –≥–æ—Ç–æ–≤!**\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ! üíï\n\n"
            f"‚öôÔ∏è –ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å!"
        )
        
        await callback.message.edit_text(
            success_text,
            reply_markup=get_profile_keyboard(True),
            parse_mode="Markdown"
        )
        await callback.answer("‚úÖ –°–ª—É—á–∞–π–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!")
        
    except Exception as e:
        logger.error(f"Error creating random profile: {e}")
        await callback.message.edit_text(
            "‚ùå **–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è**\n\n"
            "–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ —Å–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –≤—Ä—É—á–Ω—É—é.",
            reply_markup=get_profile_keyboard(False),
            parse_mode="Markdown"
        )
        await callback.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è", show_alert=True)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è —Ä—É—á–Ω–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
@router.message(ProfileCreation.waiting_for_name)
@error_handler
@user_required
async def process_name(message: types.Message, state: FSMContext, user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–º–µ–Ω–∏"""
    name = message.text.strip()
    
    if not validate_name(name):
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∏–º—è (—Ç–æ–ª—å–∫–æ –±—É–∫–≤—ã, –º–∏–Ω–∏–º—É–º 2 —Å–∏–º–≤–æ–ª–∞)"
        )
        return
    
    await state.update_data(name=name)
    await state.set_state(ProfileCreation.waiting_for_age)
    
    await message.answer(
        f"‚úÖ –ò–º—è: {name}\n\n"
        f"–®–∞–≥ 2/6: –°–∫–æ–ª—å–∫–æ –ª–µ—Ç –≤–∞—à–µ–π –¥–µ–≤—É—à–∫–µ?\n"
        f"–í–≤–µ–¥–∏—Ç–µ –≤–æ–∑—Ä–∞—Å—Ç (18-50):"
    )


@router.message(ProfileCreation.waiting_for_age)
@error_handler
async def process_age(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–æ–∑—Ä–∞—Å—Ç–∞"""
    age = validate_age(message.text.strip())
    
    if not age:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç (–æ—Ç 18 –¥–æ 50 –ª–µ—Ç)"
        )
        return
    
    await state.update_data(age=age)
    await state.set_state(ProfileCreation.waiting_for_personality)
    
    await message.answer(
        f"‚úÖ –í–æ–∑—Ä–∞—Å—Ç: {age} –ª–µ—Ç\n\n"
        f"–®–∞–≥ 3/6: –û–ø–∏—à–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä –≤–∞—à–µ–π –¥–µ–≤—É—à–∫–∏\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: –¥–æ–±—Ä–∞—è, –≤–µ—Å–µ–ª–∞—è, —É–º–Ω–∞—è, –∑–∞—Å—Ç–µ–Ω—á–∏–≤–∞—è..."
    )


@router.message(ProfileCreation.waiting_for_personality)
@error_handler
async def process_personality(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞"""
    personality = message.text.strip()
    
    if len(personality) < 10:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ —Ö–∞—Ä–∞–∫—Ç–µ—Ä –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)"
        )
        return
    
    await state.update_data(personality=personality)
    await state.set_state(ProfileCreation.waiting_for_appearance)
    
    await message.answer(
        f"‚úÖ –•–∞—Ä–∞–∫—Ç–µ—Ä —Å–æ—Ö—Ä–∞–Ω–µ–Ω\n\n"
        f"–®–∞–≥ 4/6: –û–ø–∏—à–∏—Ç–µ –≤–Ω–µ—à–Ω–æ—Å—Ç—å –≤–∞—à–µ–π –¥–µ–≤—É—à–∫–∏\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: –±–ª–æ–Ω–¥–∏–Ω–∫–∞ —Å –≥–æ–ª—É–±—ã–º–∏ –≥–ª–∞–∑–∞–º–∏, –≤—ã—Å–æ–∫–∞—è..."
    )


@router.message(ProfileCreation.waiting_for_appearance)
@error_handler
async def process_appearance(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–Ω–µ—à–Ω–æ—Å—Ç–∏"""
    appearance = message.text.strip()
    
    if len(appearance) < 10:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –≤–Ω–µ—à–Ω–æ—Å—Ç—å –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)"
        )
        return
    
    await state.update_data(appearance=appearance)
    await state.set_state(ProfileCreation.waiting_for_interests)
    
    await message.answer(
        f"‚úÖ –í–Ω–µ—à–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞\n\n"
        f"–®–∞–≥ 5/6: –ö–∞–∫–∏–µ —É –Ω–µ—ë –∏–Ω—Ç–µ—Ä–µ—Å—ã –∏ —Ö–æ–±–±–∏?\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: —á—Ç–µ–Ω–∏–µ, —Å–ø–æ—Ä—Ç, –º—É–∑—ã–∫–∞, –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è..."
    )


@router.message(ProfileCreation.waiting_for_interests)
@error_handler
async def process_interests(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–Ω—Ç–µ—Ä–µ—Å–æ–≤"""
    interests = message.text.strip()
    
    await state.update_data(interests=interests)
    await state.set_state(ProfileCreation.waiting_for_background)
    
    await message.answer(
        f"‚úÖ –ò–Ω—Ç–µ—Ä–µ—Å—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã\n\n"
        f"–®–∞–≥ 6/6: –†–∞—Å—Å–∫–∞–∂–∏—Ç–µ –æ –µ—ë –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏–∏\n"
        f"–ù–∞–ø—Ä–∏–º–µ—Ä: —Å—Ç—É–¥–µ–Ω—Ç–∫–∞, —Ä–∞–±–æ—Ç–∞–µ—Ç –¥–∏–∑–∞–π–Ω–µ—Ä–æ–º, –∂–∏–≤–µ—Ç –≤ –ú–æ—Å–∫–≤–µ..."
    )


@router.message(ProfileCreation.waiting_for_background)
@error_handler
@user_required
async def process_background(message: types.Message, state: FSMContext, user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥—ã—Å—Ç–æ—Ä–∏–∏ –∏ —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    background = message.text.strip()
    
    data = await state.get_data()
    await state.clear()
    
    try:
        async with db_service.async_session() as session:
            profile = await GirlfriendService.create_girlfriend_profile(
                session,
                user,
                name=data["name"],
                age=data["age"],
                personality=data["personality"],
                appearance=data["appearance"],
                interests=data["interests"],
                background=background,
                communication_style="–û–±—â–∞–µ—Ç—Å—è –¥—Ä—É–∂–µ–ª—é–±–Ω–æ –∏ —Ç–µ–ø–ª–æ"
            )
        
        success_text = (
            f"üéâ **–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω!**\n\n"
            f"{format_profile_info(profile)}\n\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ! üíï"
        )
        
        await message.answer(
            success_text,
            reply_markup=get_profile_keyboard(True),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error creating profile: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è —Å –ø–æ–º–æ—â—å—é –ò–ò
@router.message(ProfileCreation.waiting_for_preferences)
@error_handler
@user_required
async def process_ai_preferences(message: types.Message, state: FSMContext, user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π –¥–ª—è –ò–ò"""
    preferences = message.text.strip()
    await state.clear()
    
    if len(preferences) < 10:
        await message.answer(
            "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ–ø–∏—à–∏—Ç–µ –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏—è –ø–æ–¥—Ä–æ–±–Ω–µ–µ (–º–∏–Ω–∏–º—É–º 10 —Å–∏–º–≤–æ–ª–æ–≤)"
        )
        return
    
    await message.answer("ü§ñ –°–æ–∑–¥–∞—é –ø—Ä–æ—Ñ–∏–ª—å –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–∏—Ö –ø—Ä–µ–¥–ø–æ—á—Ç–µ–Ω–∏–π...")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—Ä–æ—Ñ–∏–ª—å —Å –ø–æ–º–æ—â—å—é –ò–ò
        profile_data = await gemini_service.generate_profile_suggestions(preferences)
        
        async with db_service.async_session() as session:
            profile = await GirlfriendService.create_girlfriend_profile(
                session,
                user,
                name=profile_data.get("name", "–ê–Ω–Ω–∞"),
                age=profile_data.get("age", 23),
                personality=profile_data.get("personality", ""),
                appearance=profile_data.get("appearance", ""),
                interests=profile_data.get("interests", ""),
                background=profile_data.get("background", ""),
                communication_style=profile_data.get("communication_style", "")
            )
        
        success_text = (
            f"üéâ **–ü—Ä–æ—Ñ–∏–ª—å —Å–æ–∑–¥–∞–Ω —Å –ø–æ–º–æ—â—å—é –ò–ò!**\n\n"
            f"{format_profile_info(profile)}\n\n"
            f"–ï—Å–ª–∏ —á—Ç–æ-—Ç–æ –Ω–µ –Ω—Ä–∞–≤–∏—Ç—Å—è, –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å! üíï"
        )
        
        await message.answer(
            success_text,
            reply_markup=get_profile_keyboard(True),
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"Error creating AI profile: {e}")
        await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")


# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
@router.callback_query(F.data == "view_profile")
@error_handler
@user_required
async def view_profile_callback(callback: types.CallbackQuery, user):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è"""
    async with db_service.async_session() as session:
        profile = await GirlfriendService.get_active_profile(session, user.id)
        
        if profile:
            text = f"üë§ **–ü—Ä–æ—Ñ–∏–ª—å –¥–µ–≤—É—à–∫–∏:**\n\n{format_profile_info(profile)}"
            await safe_edit_message(
                callback.message,
                text,
                reply_markup=get_profile_keyboard(True),
                parse_mode="Markdown"
            )
            await callback.answer("üë§ –ü—Ä–æ—Ñ–∏–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω")
        else:
            await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)


@router.callback_query(F.data == "edit_profile")
@error_handler
async def edit_profile_callback(callback: types.CallbackQuery):
    """–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    text = (
        "‚úèÔ∏è **–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è**\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:"
    )
    
    await callback.message.edit_text(
        text,
        reply_markup=get_profile_edit_keyboard(),
        parse_mode="Markdown"
    )
    await callback.answer()


@router.callback_query(F.data == "delete_profile")
@error_handler
async def delete_profile_callback(callback: types.CallbackQuery):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è"""
    text = (
        "üóë **–£–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è**\n\n"
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"
    )
    
    keyboard = get_confirmation_keyboard("profile_delete")
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()


@router.callback_query(F.data == "confirm_profile_delete")
@error_handler
@user_required
async def confirm_delete_profile(callback: types.CallbackQuery, user):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
    async with db_service.async_session() as session:
        profile = await GirlfriendService.get_active_profile(session, user.id)
        
        if profile:
            await GirlfriendService.delete_profile(session, profile.id, user.id)
            
            text = (
                "‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω\n\n"
                "–í—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ—Ñ–∏–ª—å –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è."
            )
            
            await callback.message.edit_text(
                text,
                reply_markup=get_profile_keyboard(False)
            )
            await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å —É–¥–∞–ª–µ–Ω")
        else:
            await callback.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)