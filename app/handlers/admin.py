from aiogram import Router, types
from aiogram.filters import Command
from app.utils.decorators import error_handler
from config.settings import settings
import logging

logger = logging.getLogger(__name__)
router = Router()


def is_admin(user_id: int, username: str = None) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
    if settings.admin_username and username:
        return username.lower() == settings.admin_username.lower()
    return False


@router.message(Command("admin_notifications"))
@error_handler
async def admin_notifications_command(message: types.Message):
    """–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    if not is_admin(message.from_user.id, message.from_user.username):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    from main import scheduler_service
    
    if not scheduler_service:
        await message.answer("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–∞—Ö
    jobs_info = scheduler_service.get_jobs_info()
    
    status_text = (
        f"üìä **–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π**\\n\\n"
        f"üîß –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã: {'‚úÖ –î–∞' if settings.enable_subscription_notifications else '‚ùå –ù–µ—Ç'}\\n"
        f"‚è∞ –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏: {settings.notification_check_interval_hours} —á–∞—Å–æ–≤\\n"
        f"üìÖ –£–≤–µ–¥–æ–º–ª—è—Ç—å –∑–∞: {settings.subscription_expiry_notification_days} –¥–Ω–µ–π\\n\\n"
        f"**–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏:**\\n"
    )
    
    if jobs_info:
        for job in jobs_info:
            status_text += f"‚Ä¢ {job['name']} (ID: {job['id']})\\n"
            if job['next_run']:
                status_text += f"  –°–ª–µ–¥—É—é—â–∏–π –∑–∞–ø—É—Å–∫: {job['next_run']}\\n"
    else:
        status_text += "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á\\n"
    
    status_text += "\\nüí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /admin_check_notifications –¥–ª—è –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–∏"
    
    await message.answer(status_text, parse_mode="Markdown")


@router.message(Command("admin_check_notifications"))
@error_handler
async def admin_check_notifications_command(message: types.Message):
    """–ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π"""
    if not is_admin(message.from_user.id, message.from_user.username):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    from main import scheduler_service
    
    if not scheduler_service:
        await message.answer("‚ùå –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
        return
    
    await message.answer("üîÑ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π...")
    
    try:
        stats = await scheduler_service.run_notification_check_now()
        
        result_text = (
            f"‚úÖ **–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞**\\n\\n"
            f"üì§ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏: {stats['expiry_warnings']}\\n"
            f"‚ùå –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–± –∏—Å—Ç–µ—á–µ–Ω–∏–∏: {stats['expired_notifications']}\\n"
            f"‚ö†Ô∏è –û—à–∏–±–æ–∫: {stats['errors']}"
        )
        
        await message.answer(result_text, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"Error in manual notification check: {e}")
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π: {str(e)}")


@router.message(Command("admin_help"))
@error_handler
async def admin_help_command(message: types.Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–º –∫–æ–º–∞–Ω–¥–∞–º"""
    if not is_admin(message.from_user.id, message.from_user.username):
        await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã")
        return
    
    help_text = (
        "üîß **–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã**\\n\\n"
        "üìä `/admin_notifications` - —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π\\n"
        "üîÑ `/admin_check_notifications` - –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞\\n"
        "‚ùì `/admin_help` - —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\\n\\n"
        "**–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (.env):**\\n"
        "‚Ä¢ `SUBSCRIPTION_EXPIRY_NOTIFICATION_DAYS` - –∑–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π —É–≤–µ–¥–æ–º–ª—è—Ç—å\\n"
        "‚Ä¢ `NOTIFICATION_CHECK_INTERVAL_HOURS` - –∏–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏\\n"
        "‚Ä¢ `ENABLE_SUBSCRIPTION_NOTIFICATIONS` - –≤–∫–ª—é—á–∏—Ç—å/–≤—ã–∫–ª—é—á–∏—Ç—å"
    )
    
    await message.answer(help_text, parse_mode="Markdown")