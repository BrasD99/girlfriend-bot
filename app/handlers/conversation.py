from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from app.models.girlfriend_profile import GirlfriendProfile
from app.services.database import db_service
from app.services.girlfriend_service import GirlfriendService
from app.services.conversation_service import ConversationService
from app.services.gemini_service import GeminiService
from app.utils.keyboards import get_conversation_keyboard, get_confirmation_keyboard
from app.utils.decorators import user_required, subscription_required, error_handler
from app.utils.helpers import format_conversation_stats
from app.utils.states import Conversation
import logging

logger = logging.getLogger(__name__)
router = Router()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–µ—Ä–≤–∏—Å Gemini
gemini_service = GeminiService()


@router.message(Command("chat"))
@router.message(F.text == "üí¨ –û–±—â–µ–Ω–∏–µ")
@error_handler
@user_required
@subscription_required
async def start_conversation(message: types.Message, state: FSMContext, user):
    """–ù–∞—á–∞–ª–æ –æ–±—â–µ–Ω–∏—è —Å –¥–µ–≤—É—à–∫–æ–π"""
    async with db_service.async_session() as session:
        profile = await GirlfriendService.get_active_profile(session, user.id)
        
        if not profile:
            await message.answer(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –¥–µ–≤—É—à–∫–∏!\n\n"
                "–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –≤ —Ä–∞–∑–¥–µ–ª–µ 'üë§ –ü—Ä–æ—Ñ–∏–ª—å –¥–µ–≤—É—à–∫–∏', "
                "—á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ."
            )
            return
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –æ–±—â–µ–Ω–∏—è
        await state.set_state(Conversation.chatting)
        await state.update_data(profile_id=profile.id)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
        stats = await ConversationService.get_conversation_stats(
            session, user.id, profile.id
        )
        
        if stats["total_messages"] == 0:
            # –ü–µ—Ä–≤–æ–µ –æ–±—â–µ–Ω–∏–µ
            greeting_text = (
                f"üíï –ü—Ä–∏–≤–µ—Ç! –ú–µ–Ω—è –∑–æ–≤—É—Ç {profile.name}!\n\n"
                f"–Ø –æ—á–µ–Ω—å —Ä–∞–¥–∞ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ç–æ–±–æ–π! "
                f"–†–∞—Å—Å–∫–∞–∂–∏, –∫–∞–∫ –¥–µ–ª–∞? –ß–µ–º –∑–∞–Ω–∏–º–∞–µ—à—å—Å—è? üòä"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await ConversationService.save_message(
                session, user.id, profile.id, "assistant", greeting_text
            )
        else:
            # –ü—Ä–æ–¥–æ–ª–∂–µ–Ω–∏–µ –æ–±—â–µ–Ω–∏—è
            greeting_text = (
                f"üíï –ü—Ä–∏–≤–µ—Ç! –Ø {profile.name}, —Ä–∞–¥–∞ —Ç–µ–±—è —Å–Ω–æ–≤–∞ –≤–∏–¥–µ—Ç—å!\n\n"
                f"–ö–∞–∫ –¥–µ–ª–∞? –ß—Ç–æ –Ω–æ–≤–æ–≥–æ? üòä"
            )
        
        info_text = (
            f"üí¨ **–û–±—â–µ–Ω–∏–µ —Å {profile.name}**\n\n"
            f"{greeting_text}\n\n"
            f"üìä –°–æ–æ–±—â–µ–Ω–∏–π –≤ –∏—Å—Ç–æ—Ä–∏–∏: {stats['total_messages']}\n\n"
            f"–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ–±—â–µ–Ω–∏—è!"
        )
        
        await message.answer(
            info_text,
            reply_markup=get_conversation_keyboard(),
            parse_mode="Markdown"
        )


@router.message(Conversation.chatting)
@error_handler
@user_required
async def handle_conversation_message(message: types.Message, state: FSMContext, user):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —Ä–µ–∂–∏–º–µ –æ–±—â–µ–Ω–∏—è"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –∫–Ω–æ–ø–∫–∞
    if message.text and (message.text.startswith('/') or message.text in [
        "üí¨ –û–±—â–µ–Ω–∏–µ", "üë§ –ü—Ä–æ—Ñ–∏–ª—å –¥–µ–≤—É—à–∫–∏", "üíé –ü–æ–¥–ø–∏—Å–∫–∞", "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", "‚ÑπÔ∏è –ü–æ–º–æ—â—å"
    ]):
        return
    
    data = await state.get_data()
    profile_id = data.get("profile_id")
    
    if not profile_id:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω. –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        return
    
    user_message = message.text
    if not user_message or len(user_message.strip()) == 0:
        await message.answer("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        return
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, —á—Ç–æ –±–æ—Ç –ø–µ—á–∞—Ç–∞–µ—Ç
    await message.bot.send_chat_action(message.chat.id, "typing")
    
    async with db_service.async_session() as session:
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ø—Ä–æ—Ñ–∏–ª—å –¥–µ–≤—É—à–∫–∏
            profile = await session.get(GirlfriendProfile, profile_id)
            if not profile:
                await message.answer("‚ùå –ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
                await state.clear()
                return
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await ConversationService.save_message(
                session, user.id, profile_id, "user", user_message
            )
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
            context = await ConversationService.get_recent_context(
                session, user.id, profile_id, limit=10
            )
            
            # –ú–æ–¥–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç
            if not await gemini_service.moderate_content(user_message):
                response = (
                    "–ü—Ä–æ—Å—Ç–∏, –Ω–æ —è –Ω–µ –º–æ–≥—É –æ–±—Å—É–∂–¥–∞—Ç—å —Ç–∞–∫–∏–µ —Ç–µ–º—ã... üòî\n"
                    "–î–∞–≤–∞–π –ø–æ–≥–æ–≤–æ—Ä–∏–º –æ —á–µ–º-—Ç–æ –¥—Ä—É–≥–æ–º! üòä"
                )
            else:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –¥–µ–≤—É—à–∫–∏
                response = await gemini_service.generate_response(
                    profile, user_message, context
                )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –¥–µ–≤—É—à–∫–∏
            await ConversationService.save_message(
                session, user.id, profile_id, "assistant", response
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await message.answer(response)
            
        except Exception as e:
            logger.error(f"Error in conversation: {e}")
            await message.answer(
                "–ü—Ä–æ—Å—Ç–∏, —É –º–µ–Ω—è —Å–µ–π—á–∞—Å –ø—Ä–æ–±–ª–µ–º—ã... üòî\n"
                "–ü–æ–ø—Ä–æ–±—É–π –Ω–∞–ø–∏—Å–∞—Ç—å –µ—â–µ —Ä–∞–∑ —á–µ—Ä–µ–∑ –º–∏–Ω—É—Ç–∫—É!"
            )


@router.callback_query(F.data == "clear_history")
@error_handler
async def clear_history_callback(callback: types.CallbackQuery):
    """–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    text = (
        "üóë **–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏**\n\n"
        "‚ö†Ô∏è –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—á–∏—Å—Ç–∏—Ç—å –≤—Å—é –∏—Å—Ç–æ—Ä–∏—é —Ä–∞–∑–≥–æ–≤–æ—Ä–∞?\n"
        "–≠—Ç–æ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–µ–ª—å–∑—è –æ—Ç–º–µ–Ω–∏—Ç—å!"
    )
    
    keyboard = get_confirmation_keyboard("clear_history")
    
    await callback.message.edit_text(text, reply_markup=keyboard, parse_mode="Markdown")
    await callback.answer()


@router.callback_query(F.data == "confirm_clear_history")
@error_handler
@user_required
async def confirm_clear_history(callback: types.CallbackQuery, state: FSMContext, user):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏"""
    data = await state.get_data()
    profile_id = data.get("profile_id")
    
    if not profile_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    async with db_service.async_session() as session:
        count = await ConversationService.clear_conversation_history(
            session, user.id, profile_id
        )
        
        text = (
            f"‚úÖ –ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞\n\n"
            f"–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {count}\n"
            f"–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ!"
        )
        
        await callback.message.edit_text(
            text,
            reply_markup=get_conversation_keyboard()
        )
        await callback.answer("–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞")


@router.callback_query(F.data == "cancel_clear_history")
@error_handler
async def cancel_clear_history(callback: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏"""
    await callback.message.edit_text(
        "–û—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞",
        reply_markup=get_conversation_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data == "conversation_stats")
@error_handler
@user_required
async def conversation_stats_callback(callback: types.CallbackQuery, state: FSMContext, user):
    """–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    data = await state.get_data()
    profile_id = data.get("profile_id")
    
    if not profile_id:
        await callback.answer("‚ùå –û—à–∏–±–∫–∞: –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
        return
    
    async with db_service.async_session() as session:
        stats = await ConversationService.get_conversation_stats(
            session, user.id, profile_id
        )
        
        text = format_conversation_stats(stats)
        
        await callback.message.edit_text(
            text,
            reply_markup=get_conversation_keyboard()
        )
        await callback.answer()


@router.callback_query(F.data == "back_to_main")
@error_handler
async def back_to_main_callback(callback: types.CallbackQuery, state: FSMContext):
    """–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
    await state.clear()
    
    from app.utils.keyboards import get_main_keyboard
    
    await callback.message.edit_text(
        "üè† –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=None
    )
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
    await callback.message.answer(
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–±—â–µ–Ω–∏—è
@router.message(Command("stop"))
@error_handler
async def stop_conversation(message: types.Message, state: FSMContext):
    """–í—ã—Ö–æ–¥ –∏–∑ —Ä–µ–∂–∏–º–∞ –æ–±—â–µ–Ω–∏—è"""
    current_state = await state.get_state()
    
    if current_state == Conversation.chatting:
        await state.clear()
        
        from app.utils.keyboards import get_main_keyboard
        
        await message.answer(
            "‚úÖ –û–±—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.\n\n–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–±—â–µ–Ω–∏—é –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è!",
            reply_markup=get_main_keyboard()
        )
    else:
        await message.answer("–í—ã –Ω–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ —Ä–µ–∂–∏–º–µ –æ–±—â–µ–Ω–∏—è.")


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤–Ω–µ —Ä–µ–∂–∏–º–∞ –æ–±—â–µ–Ω–∏—è
@router.message()
@error_handler
async def handle_unknown_message(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    current_state = await state.get_state()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Ä–µ–∂–∏–º–µ –æ–±—â–µ–Ω–∏—è, –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –ø–æ–º–æ—â—å
    if current_state != Conversation.chatting:
        await message.answer(
            "ü§î –Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.\n\n"
            "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
        )