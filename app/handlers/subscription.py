from aiogram import Router, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from app.services.database import db_service
from app.services.user_service import UserService
from app.services.subscription_service import SubscriptionService
from app.services.subscription_plan_service import SubscriptionPlanService
from app.services.payment_service import PaymentService
from app.utils.keyboards import (
    get_subscription_keyboard, get_confirmation_keyboard,
    get_subscription_plans_keyboard, get_plan_details_keyboard
)
from app.utils.decorators import user_required, error_handler
from app.utils.helpers import format_subscription_info, safe_edit_message
from app.utils.states import Payment as PaymentState
from app.models import Payment
from config.settings import settings
from decimal import Decimal
import logging

logger = logging.getLogger(__name__)
router = Router()


@router.message(Command("subscription"))
@router.message(F.text == "üíé –ü–æ–¥–ø–∏—Å–∫–∞")
@error_handler
@user_required
async def subscription_menu(message: types.Message, user):
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–æ–π"""
    async with db_service.async_session() as session:
        subscription_info = await SubscriptionService.get_subscription_info(session, user.id)
    
    text = format_subscription_info(subscription_info)
    keyboard = get_subscription_keyboard(subscription_info["has_subscription"])
    
    await message.answer(text, reply_markup=keyboard)


@router.callback_query(F.data == "subscription_info")
@error_handler
@user_required
async def subscription_info_callback(callback: types.CallbackQuery, user):
    """–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–¥–ø–∏—Å–∫–µ"""
    async with db_service.async_session() as session:
        subscription_info = await SubscriptionService.get_subscription_info(session, user.id)
    
    text = format_subscription_info(subscription_info)
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    was_edited = await safe_edit_message(callback.message, text, callback.message.reply_markup)
    
    if was_edited:
        await callback.answer("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
    else:
        await callback.answer("üìä –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∞–∫—Ç—É–∞–ª—å–Ω–∞")


@router.callback_query(F.data == "activate_trial")
@error_handler
@user_required
async def activate_trial_callback(callback: types.CallbackQuery, user):
    """–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–±–Ω–æ–≥–æ –ø–µ—Ä–∏–æ–¥–∞"""
    async with db_service.async_session() as session:
        if user.trial_used:
            await callback.answer(
                "‚ùå –í—ã —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥",
                show_alert=True
            )
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∞–∫—Ç–∏–≤–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–∏
        if await SubscriptionService.is_user_subscribed(session, user.id):
            await callback.answer(
                "‚ùå –£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞",
                show_alert=True
            )
            return
        
        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥
        await UserService.start_trial(session, user)
        await SubscriptionService.create_trial_subscription(session, user)
        
        success_text = (
            "üéâ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
            f"‚úÖ –í–∞–º –¥–æ—Å—Ç—É–ø–Ω—ã –≤—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –Ω–∞ {settings.trial_days} –¥–Ω–µ–π\n"
            "üí¨ –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ —Å –¥–µ–≤—É—à–∫–æ–π\n"
            "üë§ –°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —Ä–∞–∑–¥–µ–ª–µ\n\n"
            "–ü—Ä–∏—è—Ç–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è! üíï"
        )
        
        await callback.message.edit_text(
            success_text,
            reply_markup=get_subscription_keyboard(True)
        )
        await callback.answer("üéÅ –ü—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!")


@router.callback_query(F.data == "buy_subscription")
@error_handler
@user_required
async def buy_subscription_callback(callback: types.CallbackQuery, state: FSMContext, user):
    """–ü–æ–∫—É–ø–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    async with db_service.async_session() as session:
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
            payment = await PaymentService.create_payment(
                session,
                user,
                Decimal(settings.subscription_price),
                "–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –º–µ—Å—è—Ü"
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞—Ç–µ–∂–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.set_state(PaymentState.waiting_for_payment)
            await state.update_data(payment_id=payment.id)
            
            payment_text = (
                f"üí≥ **–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏**\n\n"
                f"üí∞ –°—É–º–º–∞: {settings.subscription_price}‚ÇΩ\n"
                f"üìÖ –ü–µ—Ä–∏–æ–¥: 1 –º–µ—Å—è—Ü\n"
                f"üîÑ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: –î–∞\n\n"
                f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å' –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ."
            )
            
            from app.utils.keyboards import get_payment_keyboard
            keyboard = get_payment_keyboard(payment.confirmation_url)
            
            await callback.message.edit_text(
                payment_text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            await callback.answer()
            
        except Exception as e:
            logger.error(f"Error creating payment: {e}")
            await callback.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                show_alert=True
            )


@router.callback_query(F.data == "cancel_payment")
@error_handler
async def cancel_payment_callback(callback: types.CallbackQuery, state: FSMContext):
    """–û—Ç–º–µ–Ω–∞ –ø–ª–∞—Ç–µ–∂–∞"""
    await state.clear()
    
    cancel_text = (
        "‚ùå –û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞\n\n"
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ –æ–ø–ª–∞—Ç–µ –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏."
    )
    
    await callback.message.edit_text(
        cancel_text,
        reply_markup=get_subscription_keyboard(False)
    )
    await callback.answer("–û–ø–ª–∞—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")


@router.callback_query(F.data == "extend_subscription")
@error_handler
@user_required
async def extend_subscription_callback(callback: types.CallbackQuery, state: FSMContext, user):
    """–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏"""
    # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ –ø–æ–∫—É–ø–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏
    await buy_subscription_callback(callback, state, user)


@router.callback_query(F.data == "cancel_subscription")
@error_handler
@user_required
async def cancel_subscription_callback(callback: types.CallbackQuery, user):
    """–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏"""
    confirmation_text = (
        "‚ùì –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Ç–º–µ–Ω–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É?\n\n"
        "‚ö†Ô∏è –ü–æ—Å–ª–µ –æ—Ç–º–µ–Ω—ã:\n"
        "‚Ä¢ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–∫–ª—é—á–µ–Ω–æ\n"
        "‚Ä¢ –î–æ—Å—Ç—É–ø —Å–æ—Ö—Ä–∞–Ω–∏—Ç—Å—è –¥–æ –∫–æ–Ω—Ü–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–µ—Ä–∏–æ–¥–∞\n"
        "‚Ä¢ –í—ã —Å–º–æ–∂–µ—Ç–µ –≤–æ–∑–æ–±–Ω–æ–≤–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É –≤ –ª—é–±–æ–µ –≤—Ä–µ–º—è"
    )
    
    keyboard = get_confirmation_keyboard("subscription_cancel")
    
    await callback.message.edit_text(
        confirmation_text,
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data == "confirm_subscription_cancel")
@error_handler
@user_required
async def confirm_cancel_subscription(callback: types.CallbackQuery, user):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
    async with db_service.async_session() as session:
        subscription = await SubscriptionService.get_active_subscription(session, user.id)
        
        if subscription:
            await SubscriptionService.cancel_subscription(session, subscription)
            
            # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ
            subscription_info = await SubscriptionService.get_subscription_info(session, user.id)
            text = format_subscription_info(subscription_info)
            keyboard = get_subscription_keyboard(subscription_info["has_subscription"])
            
            await callback.message.edit_text(
                text,
                reply_markup=keyboard
            )
            await callback.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞")
        else:
            await callback.answer("‚ùå –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞", show_alert=True)


@router.callback_query(F.data == "cancel_subscription_cancel")
@error_handler
async def cancel_subscription_cancel(callback: types.CallbackQuery):
    """–û—Ç–º–µ–Ω–∞ –æ—Ç–º–µ–Ω—ã –ø–æ–¥–ø–∏—Å–∫–∏"""
    await callback.message.edit_text(
        "–û—Ç–º–µ–Ω–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω–∞ üòä",
        reply_markup=get_subscription_keyboard(True)
    )
    await callback.answer()


@router.callback_query(F.data == "view_plans")
@error_handler
@user_required
async def view_plans_callback(callback: types.CallbackQuery, user):
    """–ü—Ä–æ—Å–º–æ—Ç—Ä –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–ª–∞–Ω–æ–≤ –ø–æ–¥–ø–∏—Å–∫–∏"""
    async with db_service.async_session() as session:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –ø–ª–∞–Ω—ã, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        await SubscriptionPlanService.initialize_plans_if_needed(session)
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø–ª–∞–Ω—ã
        plans = await SubscriptionPlanService.get_all_active_plans(session)
        
        if not plans:
            await callback.answer("‚ùå –ü–ª–∞–Ω—ã –ø–æ–¥–ø–∏—Å–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", show_alert=True)
            return
        
        plans_text = "üí≥ **–í—ã–±–µ—Ä–∏—Ç–µ –ø–ª–∞–Ω –ø–æ–¥–ø–∏—Å–∫–∏:**\n\n"
        
        for plan in plans:
            plan_info = SubscriptionPlanService.format_plan_info(plan)
            plans_text += f"{plan_info}\n\n"
            plans_text += "---\n\n"
        
        keyboard = get_subscription_plans_keyboard(plans)
        
        await callback.message.edit_text(
            plans_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()


@router.callback_query(F.data.startswith("buy_plan_"))
@error_handler
@user_required
async def buy_plan_callback(callback: types.CallbackQuery, state: FSMContext, user):
    """–ü–æ–∫—É–ø–∫–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–ª–∞–Ω–∞"""
    plan_id = int(callback.data.split("_")[-1])
    
    async with db_service.async_session() as session:
        plan = await SubscriptionPlanService.get_plan_by_id(session, plan_id)
        
        if not plan:
            await callback.answer("‚ùå –ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        plan_details = SubscriptionPlanService.format_plan_info(plan)
        
        details_text = (
            f"üí≥ **–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏ –ø–ª–∞–Ω–∞:**\n\n"
            f"{plan_details}\n\n"
            f"–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–æ–∫—É–ø–∫—É:"
        )
        
        keyboard = get_plan_details_keyboard(plan_id)
        
        await callback.message.edit_text(
            details_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        await callback.answer()


@router.callback_query(F.data.startswith("confirm_buy_plan_"))
@error_handler
@user_required
async def confirm_buy_plan_callback(callback: types.CallbackQuery, state: FSMContext, user):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏ –ø–ª–∞–Ω–∞"""
    plan_id = int(callback.data.split("_")[-1])
    
    async with db_service.async_session() as session:
        plan = await SubscriptionPlanService.get_plan_by_id(session, plan_id)
        
        if not plan:
            await callback.answer("‚ùå –ü–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω", show_alert=True)
            return
        
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–ª–∞—Ç–µ–∂
            payment = await PaymentService.create_payment(
                session,
                user,
                plan.price,
                f"–ü–æ–¥–ø–∏—Å–∫–∞: {plan.name}",
                plan.id
            )
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID –ø–ª–∞–Ω–∞ –∏ –ø–ª–∞—Ç–µ–∂–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
            await state.set_state(PaymentState.waiting_for_payment)
            await state.update_data(payment_id=payment.id, plan_id=plan.id)
            
            payment_text = (
                f"üí≥ **–û–ø–ª–∞—Ç–∞ –ø–æ–¥–ø–∏—Å–∫–∏**\n\n"
                f"üí∏ –ü–ª–∞–Ω: {plan.name}\n"
                f"üí∞ –°—É–º–º–∞: {plan.price}‚ÇΩ\n"
                f"üìÖ –ü–µ—Ä–∏–æ–¥: {plan.duration_days} –¥–Ω–µ–π\n"
                f"üîÑ –ê–≤—Ç–æ–ø—Ä–æ–¥–ª–µ–Ω–∏–µ: –î–∞\n\n"
                f"–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–û–ø–ª–∞—Ç–∏—Ç—å' –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ –æ–ø–ª–∞—Ç–µ.\n"
                f"–ü–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ–ø–ª–∞—Ç—ã –ø–æ–¥–ø–∏—Å–∫–∞ –±—É–¥–µ—Ç –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏."
            )
            
            from app.utils.keyboards import get_payment_keyboard
            keyboard = get_payment_keyboard(payment.confirmation_url)
            
            await callback.message.edit_text(
                payment_text,
                reply_markup=keyboard,
                parse_mode="Markdown"
            )
            await callback.answer()
            
        except Exception as e:
            logger.error(f"Error creating payment for plan {plan_id}: {e}")
            await callback.answer(
                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–ª–∞—Ç–µ–∂–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
                show_alert=True
            )


@router.callback_query(F.data == "back_to_subscription")
@error_handler
@user_required
async def back_to_subscription_callback(callback: types.CallbackQuery, user):
    """–í–æ–∑–≤—Ä–∞—Ç –∫ –º–µ–Ω—é –ø–æ–¥–ø–∏—Å–∫–∏"""
    async with db_service.async_session() as session:
        subscription_info = await SubscriptionService.get_subscription_info(session, user.id)
    
    text = format_subscription_info(subscription_info)
    keyboard = get_subscription_keyboard(subscription_info["has_subscription"])
    
    # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    await safe_edit_message(callback.message, text, keyboard)
    await callback.answer()