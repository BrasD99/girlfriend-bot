from aiogram import Router, types
from aiogram.filters import Command
from app.services.database import db_service
from app.services.payment_service import PaymentService
from app.services.subscription_service import SubscriptionService
from app.services.user_service import UserService
from app.services.subscription_plan_service import SubscriptionPlanService
from app.models import User
from app.utils.decorators import error_handler
from app.utils.helpers import format_datetime_for_user
import logging
from yookassa import Configuration
from config.settings import settings

logger = logging.getLogger(__name__)
router = Router()


@router.message(Command("webhook"))
@error_handler
async def webhook_handler(message: types.Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ webhook –æ—Ç YooKassa (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)"""
    # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ webhook –¥–æ–ª–∂–µ–Ω –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ HTTP POST
    # –≠—Ç–æ—Ç —Ö—ç–Ω–¥–ª–µ—Ä —Ç–æ–ª—å–∫–æ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    await message.answer("Webhook handler - –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤")


async def process_yookassa_webhook(webhook_data: dict) -> bool:
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç YooKassa"""
    try:
        async with db_service.async_session() as session:
            success = await PaymentService.process_webhook(session, webhook_data)
            
            if success:
                # –ï—Å–ª–∏ –ø–ª–∞—Ç–µ–∂ —É—Å–ø–µ—à–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∏–ª–∏ –ø—Ä–æ–¥–ª–µ–≤–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                event_type = webhook_data.get("event")
                payment_data = webhook_data.get("object")
                
                if event_type == "payment.succeeded" and payment_data:
                    payment_id = payment_data.get("id")
                    payment = await PaymentService.get_payment_by_yookassa_id(session, payment_id)
                    
                    if payment:
                        user = await session.get(User, payment.user_id)
                        if user:
                            # –ü–æ–ª—É—á–∞–µ–º –ø–ª–∞–Ω –∏–∑ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –ø–ª–∞—Ç–µ–∂–∞ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Å—è—á–Ω—ã–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                            metadata = payment_data.get("metadata", {})
                            plan_id = metadata.get("plan_id")
                            
                            plan = None
                            if plan_id:
                                plan = await SubscriptionPlanService.get_plan_by_id(session, int(plan_id))
                            
                            if not plan:
                                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –º–µ—Å—è—á–Ω—ã–π –ø–ª–∞–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                                plan = await SubscriptionPlanService.get_plan_by_type(session, "monthly")
                            
                            if plan:
                                # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–ø–∏—Å–∫—É
                                subscription = await SubscriptionService.create_paid_subscription(
                                    session, user, plan, payment_id
                                )
                                
                                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                                await _notify_user_subscription_activated(user, plan, subscription)
                                
                                logger.info(f"Subscription activated for user {user.telegram_id} with plan {plan.name}")
                                return True
                            else:
                                logger.error(f"No plan found for payment {payment_id}")
            
            return success
            
    except Exception as e:
        logger.error(f"Error processing webhook: {e}")
        return False


async def _notify_user_subscription_activated(user: User, plan, subscription):
    """–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–± –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ –ø–æ–¥–ø–∏—Å–∫–∏"""
    try:
        from main import bot
        from app.utils.keyboards import get_subscription_keyboard
        
        success_text = (
            "üéâ **–û–ø–ª–∞—Ç–∞ –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ!**\n\n"
            f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ '{plan.name}' –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞\n"
            f"üìÖ –î–µ–π—Å—Ç–≤—É–µ—Ç –¥–æ: {format_datetime_for_user(subscription.end_date, include_time=True)}\n"
            "üí¨ –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±–æ—Ç–∞ –¥–æ—Å—Ç—É–ø–Ω—ã\n\n"
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É! üíï\n\n"
            "–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ:\n"
            "‚Ä¢ –°–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å –¥–µ–≤—É—à–∫–∏\n"
            "‚Ä¢ –ù–∞—á–∞—Ç—å –æ–±—â–µ–Ω–∏–µ\n"
            "‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤—Å–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"
        )
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–ø–∏—Å–∫–µ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
        async with db_service.async_session() as session:
            subscription_info = await SubscriptionService.get_subscription_info(session, user.id)
        
        keyboard = get_subscription_keyboard(subscription_info)
        
        await bot.send_message(
            chat_id=user.telegram_id,
            text=success_text,
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
        logger.info(f"Notification sent to user {user.telegram_id}")
        
    except Exception as e:
        logger.error(f"Error sending notification to user {user.telegram_id}: {e}")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook –≤ YooKassa (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞)
async def setup_yookassa_webhook():
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –≤ YooKassa"""
    try:
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é YooKassa
        Configuration.account_id = settings.yookassa_shop_id
        Configuration.secret_key = settings.yookassa_secret_key
        
        if settings.webhook_url:
            webhook_url = f"{settings.webhook_url}/yookassa_webhook"
            
            logger.info(f"YooKassa webhook URL would be: {webhook_url}")
            logger.info("Note: Webhook setup should be done manually in YooKassa dashboard for production")
            
            # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ webhook –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç—Å—è –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –ø–∞–Ω–µ–ª—å YooKassa
            # –ó–¥–µ—Å—å –º—ã —Ç–æ–ª—å–∫–æ –ª–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            return True
        else:
            logger.warning("Webhook URL not configured - running in polling mode")
            return True  # –ù–µ —Å—á–∏—Ç–∞–µ–º —ç—Ç–æ –æ—à–∏–±–∫–æ–π –¥–ª—è —Ä–µ–∂–∏–º–∞ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
            
    except Exception as e:
        logger.error(f"Error setting up YooKassa webhook: {e}")
        return False